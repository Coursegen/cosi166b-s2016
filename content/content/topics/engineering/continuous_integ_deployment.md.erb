---
title: Continuous Integration and Deployment
---
#### Continuous Integration and Deployment
* Objective 1: Make sure that bugs are detected as early as possible
  * Make sure that your source code is consistent, and integrates
  * How? Have as much testing as you can
  * Push all code to your source code repository
  * Automatically triggers a pull/run all tests
  * Ideally: report to team and to individual developer
* Objective 2: Make sure users can start playing with new product asap
  * Once integration works, push it out to a server
  * Often there's a test or staging server
  * Historically: Release every year, 6 months, month, week. Now: Serious standard is release multiple times a day!
  * Automatic and continuous deployment

#### Practices of Continuous Integration

(Credit: [Martin Fowler](http://martinfowler.com/articles/continuousIntegration.html))

1. **Maintain a single source code repository:** Decide on your branching strategy and make sure all developers understand it. There are different philosophies.
1. **Automate the "build":** Whatever the process is for your product to turn hundreds of source code files into a working application should be fully automated so it can be triggered by any developer with a click of the button.
1. **Implement a comprehensive test suite** As much of the functionality as possible should be covered by tests, both functional and regression tests. Unit and integration tests. A software product approaching version 1.0 will have multiple hundreds of tests.
1. **Everyone commits to the repository at least daily. Letting one developer's local code diverge from what's visible to the rest of the team can easily lead to bugs, lost work, replicated work.
1. **Every commit should run tests:** Automatically. Given that both those operations can be done with "a single click", automatically triggering them as a result of a commit is not hard.
1. **Fix broken builds immediately:**  When the test suite fails, ideally, the "responsible" developer should be immediately notified. Make it a group norm that you either fix the breaking commit or roll it back. The build should not be broken for any length of time.
1. **Deploy to a test server:** Before deploying to the live production server, do an automatic deployment to a test or staging server. Run tests there. Give access to that server to trusted testers to play with it.



##### Reference
* [Deploy from Codeship.io to Heroku](https://www.codeship.io/documentation/tutorials/continuous-deployment-heroku-github-ruby-rails/)
* [Details about Continuous Integration](http://martinfowler.com/articles/continuousIntegration.html)
