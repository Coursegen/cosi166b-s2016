---
title: Links of interest to Software Engineers
---
#### Links of interest to Software Engineers

* [Architecting Rails as Microservice Applications](http://blog.codeship.com/architecting-rails-apps-as-microservices/?utm_source=rubyweekly&utm_medium=email)
* [How to measure Ruy app performance with New Relic](http://www.nateberkopec.com/2015/10/15/ruby-app-performance-with-new-relic.html?utm_source=Ruby+Performance+Newsletter&utm_campaign=b6126a5e8a-New_Relic10_15_2015&utm_medium=email&utm_term=0_840412962b-b6126a5e8a-80441273)
* [App Server Arena, a comparison of popular Ruby Application Servers](https://blog.engineyard.com/2014/ruby-app-server-arena-pt1)
* [Passing the google interview without a Cosi degree](http://blog.teamtreehouse.com/passing-google-interview-without-computer-science-degree)
* [Scaling Ruby Apps to 1000 Requests per Minute - A Beginner's Guide](http://www.nateberkopec.com/2015/07/29/scaling-ruby-apps-to-1000-rpm.html?utm_source=rubyweekly&utm_medium=email)
* [Testing Your SLA with Loader and New Relic Insights](https://loader.io/blog/2014/10/16/testing-sla-loader-new-relic-insights/)
* [Dissect my results: What's this green line doing?](https://loader.io/blog/2014/01/24/dissect-my-results-whats-this-green-line-doing/)
* [Bob Pikes Rules of Programming](http://users.ece.utexas.edu/~adnan/pike.html)
* [Partitioning with Redis](http://redis.io/topics/partitioning)
* [Open Source Load Testing Tools: Which One Should You Use?](http://blazemeter.com/blog/open-source-load-testing-tools-which-one-should-you-use)
* [Building Scalable Databases: Pros and Cons of Various Database Sharding Schemes](http://www.25hoursaday.com/weblog/2009/01/16/BuildingScalableDatabasesProsAndConsOfVariousDatabaseShardingSchemes.aspx)
* [The Art of Enbugging](http://media.pragprog.com/articles/jan_03_enbug.pdf)
* Really good summary of REST pragmatics: [Best Practices for Designing a Pragmatic RESTful API](http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api)
* Wonderful intro to minitest spec: [Minimalicious Testing in Ruby](http://blog.arvidandersson.se/2012/03/28/minimalicous-testing-in-ruby-1-9)
* Great conceptual overview: [Mocks aren't Stubs](http://www.martinfowler.com/articles/mocksArentStubs.html)
* <%= link_to_topic :se_rules_of_thumb %>
* Interesting presentation about google's scaling: [Software Engineering Advice from Building Large-Scale Distributed Systems](http://static.googleusercontent.com/media/research.google.com/en/us/people/jeff/stanford-295-talk.pdf)
* [Architecture, The Lost Years](https://www.youtube.com/watch?v=WpkDN78P884&feature=player_embedded)
* [BDD With Minitest Spec](https://semaphoreapp.com/blog/2014/10/27/bdd-on-rails-with-minitest-part-1-up-and-running.html)
* [Debugging Rails Applications](http://nofail.de/2013/10/debugging-rails-applications-in-development/)
* [Duck Typing](http://blog.rubybestpractices.com/posts/gregory/046-issue-14-duck-typing.html)
* [Feature Switches at Flickr](http://code.flickr.net/2009/12/02/flipping-out/)
* [Five Rules for Product Demos](http://blog.launch.co/blog/five-rules-i-learned-from-7-years-of-coaching-launch-festiva.html)
* [Getting the V in MVP right](http://www.eleganthack.com/getting-the-v-right/)
* [Git Tutorials](http://net.tutsplus.com/?s=git)
* [History of Software Testing](http://www.testingreferences.com/testinghistory.php)
* [How I learned to test my Rails Applications, Part 4](http://everydayrails.com/2012/04/07/testing-series-rspec-controllers.html)
* [Laziness, Impatience and Hubris](http://c2.com/cgi/wiki?LazinessImpatienceHubris)
* [Let Me Google That For you](http://lmgtfy.com)
* [Microservices by Fowler](http://martinfowler.com/articles/microservices.html)
* [MiniTest::Spec tutorial](http://www.rubyinside.com/a-minitestspec-tutorial-elegant-spec-style-testing-that-comes-with-ruby-5354.html)
* [Minitest Quick Reference](http://mattsears.com/articles/2011/12/10/minitest-quick-reference)
* [ORM Hate (Martin Fowler)](http://martinfowler.com/bliki/OrmHate.html)
* [Object Oriented Design Patterns in Ruby](http://www.brpreiss.com/books/opus8/)
* [RESTful Web Services: The Basics](http://www.ibm.com/developerworks/webservices/library/ws-restful/)
* [Rails Guide about Routing](http://guides.rubyonrails.org/routing.html)
* [Rails Routing Guide](http://guides.rubyonrails.org/routing.html)
* [Rails Testing Pyramid](http://blog.codeclimate.com/blog/2013/10/09/rails-testing-pyramid/)
* [Rails Testing Series Intro](http://everydayrails.com/2012/03/12/testing-series-intro.html)
* [Rails Testing Series Models and Factory Girl](http://everydayrails.com/2012/03/19/testing-series-rspec-models-factory-girl.html)
* [Rails Testing Series RSpec and Controllers](http://everydayrails.com/2012/04/07/testing-series-rspec-controllers.html)
* [Rails Testing Series RSpec and Requests](http://everydayrails.com/2012/04/24/testing-series-rspec-requests.html)
* [Rails Testing Series Rspec Setup](http://everydayrails.com/2012/03/12/testing-series-rspec-setup.html)
* [Rails Timezone Tutorial](http://apprentice.craic.com/tutorials/48)
* [Rubular for Regular Expressions](http://rubular.com)
* [Ruby Gotchas](http://blog.elpassion.com/ruby-gotchas/?utm_source=rubyweekly&utm_medium=email)
* [Ruby Idioms](https://code.google.com/p/tokland/wiki/RubyIdioms)
* [Ruby Toolbox](http://ruby-toolbox.com)
* [Ruby Toolbox](http://ruby-toolbox.com)
* [SOLID - Single Responsibility Principle](http://dev.tutsplus.com/tutorials/solid-part-1-the-single-responsibility-principle--net-36074)
* [SVD Recommendation System in Ruby](http://www.igvita.com/2007/01/15/svd-recommendation-system-in-ruby/)
* [Sandy Metz on Object Oriented Design](http://www.confreaks.com/videos/240-goruco2009-solid-object-oriented-design)
* [Shell Tutorial](http://net.tutsplus.com/?s=terminal)
* [Twelve Factor App](http://12factor.net)
* [Using Minitest/spec with Rails 4](http://blowmage.com/2013/07/08/minitest-spec-rails4)
