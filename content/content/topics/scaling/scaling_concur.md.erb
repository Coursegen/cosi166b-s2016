---
title: Scaling with Concurrency
---
### Scalability Pattern: Concurrency
* Do more with the available resources
* Do more things at the same time
* Resource idle time is your enemy
  * CPU
  * Network
  * Disk
  * Database

#### Scenarios when concurrency is an option

* Users can ask for a detailed report about their twitter traffic
  * It can be a one shot, or regenerated at midnight
  * It can be displayed on the screen or emailed
  * Inline is no good because of computational cost and error handling
* Users tweet with attached images
  * Submitted in all kinds of formats, shapes and sizes
  * Need to convert and resize to standard shapes and sizes
  * Inline no good due to computational cost and error handling
* System sends an email to newly registered users
  * After creating the new user in db, send a confirm email with a link
  * Inline is no good, due to network latency and error handling

### Scaling pattern: concurrency on a single computer

* Difference between syncrhonous and asynchronous
* Difference between concurrent and parallel

#### Processes and Threads
* Key Operating System facility for concurrency
* Processes ("forking")
  * Use more memory (new VM for each process)
    * for the data + the program + everything
    * "Copy on write"
  * Context switching very expensive
  * Communication expensive (IPC or file system)
  * Slower to create and destroy
  * Less hard to program and debug (not easy!)
* Threads
  * Use less memory (Shared memory space)
  * Context switching cheap
  * Communication cheap (via queues and shared memory)
  * Fast to create and destroy
  * Harder to program and debug

#### Thread-safe
* A property of software, or a routine or a class
* Does it behave 'well' when running in a thread (sharing memory)
* Deadlock ("mortal embrace")
  * Example with two people and two tools
* Race Condition
  * When the results vary due to
  * How to avoid: using semaphors, queues, and other techniques
* Ruby GIL
* Higher level constructs, e.g. Actors (threads that only talk through queues)
  * See [Celluloid Actor Based Library for Ruby](https://github.com/celluloid/celluloid)

##### Demonstrations...
