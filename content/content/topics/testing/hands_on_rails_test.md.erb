---
title: Hands on Rails Test Demo
---
##### Set up
~~~
rails new my_app
cd my_app
~~~

##### Add to gemfiles
~~~
gem 'pry-byebug'
gem 'better_errors'
gem 'minitest-rails'
~~~

#### Add and test a model
~~~
rails generate minitest:install
rails generate model word eng:string ned:string
rake db:migrate
~~~

##### Default empty test (word_test.rb)
~~~
require_relative '../test_helper'

describe Word do
  it "succeeds in default test" do
    1.must_equal 1
  end
end
~~~

##### See what rake tasks are present
~~~
rake -T
~~~

##### Add some more tests
~~~
it "stores a translation" do
  word = Word.new(eng: "house", ned: "huis")
  word.eng.must_equal "house"
  word.ned.must_equal "huis"
end
~~~

##### One way to add fixtures
~~~
before do
  Word.destroy_all
  Word.create(eng: "house", ned: "huis")
  Word.create(eng: "boat", ned: "boot")
end
~~~

##### And see if words model can be persisted
~~~
it "has two words in database" do
  Word.count.must_equal 2
end

it "can accept a new word" do
  Word.create(eng: "shoe", ned: "schoen")
  Word.count.must_equal 3
end
~~~

##### Add a validation to the model
~~~
class Word < ActiveRecord::Base
  validates :eng, presence: true
  validates :ned, presence: true
end
~~~

##### Add a test for the validation
~~~
it "cannot save a word without the english and dutch text" do
  w = Word.create(eng: "university")
  w.valid?.must_equal false
end
~~~

##### Test the Word.random method
~~~
it "Can return a random word" do
  w = Word.random
  w.must_be_kind_of Word
end
~~~

#### Implement the Word.random method
~~~
def self.random
  offset = rand(Word.count)
  Word.offset(offset).first
end
~~~

#### Add and test a controller
~~~
rails generate controller Words learn
~~~

##### First write the test for the learn action
~~~
require_relative '../test_helper'

describe class WordsController < ApplicationController do
  it "handles learn action" do
    get :learn
    assigns('word').must_be_kind_of Word
    assert_response :success
  end
end
~~~

##### Now actually implement the action in the WordsController
~~~
class WordsController < ApplicationController
  def learn
    @word = Word.new
  end
end
~~~

##### Now, lets test that the controller is calling the Word.random method
~~~
it "passes a word from random" do
  target_word = Word.new(eng: "nose", ned: "neus")
  Word.stub :random, target_word do
    get :learn
    assigns('word').must_equal target_word
  end
end
~~~

* Stub creates a temporary override of the Word.random method
* And then verifies that it is being called,which it is now.
* We now need to update the controller to actually call Word.random
~~~

##### WordController calls Word.random
~~~
class WordsController < ApplicationController
  def learn
    @word = Word.random
  end
end
~~~

#### References
* [Minitest Rails Gem](http://blowmage.com/minitest-rails/)
* [RoR Guide about testing](http://guides.rubyonrails.org/testing.html)
* [BDD with Minitest](https://semaphoreapp.com/blog/2014/10/27/bdd-on-rails-with-minitest-part-1-up-and-running.html)
* [Old Post on which my example above is based more or less](http://andrzejonsoftware.blogspot.com/2007/05/15-tdd-steps-to-create-rails.html)
* [Minitest Readme](https://github.com/seattlerb/minitest)
* [Minitest Quick Reference](http://www.mattsears.com/articles/2011/12/10/minitest-quick-reference)
