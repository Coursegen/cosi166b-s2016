---
title: Testing Pyramid
---
#### Testing Pyramid

##### Costs of testing
* Code to write
* Tests to run
* As the software (inevitably) evolves
  * interfaces change
  * The code changes in two places: implementation and test
  * Sometimes more: test fixtures, database schemas
* Conclusion:
  * More is not necessarily better

##### Testing Pyramid
* From (fewest -> most) tests and brittleness
  1. User Interface tests
  1. ...
  1. Integration tests
  1. ...
  1. Unit Tests

#### Test Everything?

##### What not to test
* Try not to test the same thing in more than one place
* Try not to test a library which is itself well tests
* Try not to test something that is self-evidently trivial (eye of the beholder)

##### What to test
* Try to test code which is prone to off-by-one errors
* Try to test code with intricate algorithms
* Try to test to verify assumption

##### Natural 'borders' in the architecture
* If I check your passport (i.e. validate inputs) at the border
* Then it makes no sense to check it every time you enter a building
* As long as there are no unguarded borders :)

##### About Brittle Tests
* When a change in design suddenly makes a large number of tests fail
* Sign that either your design or your test approach can be improved




